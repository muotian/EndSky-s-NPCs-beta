use ::java::world::item::SingleItem
use ::java::world::item::ItemStack
use ::java::util::text::Text

struct NpcStorage {
  /// The settings for each NPC.
  /// 每個 NPC 的設定。
  [string]: PerNpcStorage
}

struct PerNpcStorage {
  /// Stores multiple normal dialogues, witch will be selected in order by default.
  /// 可儲存多個普通對話，預設會按順序選擇。
  Normal?: [Dialogue],
  /// If true, the dialogues will be randomly selected. Defaults to false.
  /// 若為 true，對話將會隨機選擇。預設為 false。
  NormalRandom?: boolean,
  /// The dialogue when the player exits the NPC. Effective only when options is triggered or "Trader" is true.
  /// 玩家離開 NPC 時的對話。僅在選項觸發或 "Trader" 為 true 時有效。
  Exit?: Exit,
  /// The texts when the NPC is idle.
  /// NPC 閒置時的文字。
  Idle?: [Idle],
  /// Common sound pool where sounds will be choosen randomly from when the NPC displays any text. If omitted, the default villager sound will be played.
  /// NPC 顯示任何文字時將於其中隨機選擇音效的通用音效池。若省略，將播放預設的村民音效。
  SoundPool?: [Sound],
  /// If true, the NPC will be a trader. Defaults to false.
  /// 若為 true，NPC 將會是一個商人。預設為 false。
  Trader?: boolean,
  /// Effective only when "Trader" is true. The dialogues for trader NPCs after triggering "chat".
  /// 僅在 "Trader" 為 true 時有效。觸發「交談」後商人 NPC 的普通對話。
  TraderNormal?: [Dialogue],
  /// Effective only when "Trader" is true. If true, the trader dialogues will be randomly selected. Defaults to false.
  /// 僅在 "Trader" 為 true 時有效。若為 true，商人對話將會隨機選擇。預設為 false。
  TraderNormalRandom?: boolean,
  /// Effective only when "Trader" is true. Trading options inside the "Buy" villager.
  /// 僅在 "Trader" 為 true 時有效。「購入」村民內的交易選項。
  Buy?: [Recipe],
  /// Effective only when "Trader" is true. Trading options inside the "Sell" villager.
  /// 僅在 "Trader" 為 true 時有效。「售出」村民內的交易選項。
  Sell?: [Recipe],
}

struct Dialogue {
  /// The multiple dialogue texts that will be orederly displayed.
  /// 將會按順序顯示的多段對話文字。
  Texts: (
    #[since="1.21.5"] [Text] |
    #[until="1.21.5"] [#[text_component] string]
    ),
  /// Optional. If true, the dialogue will be triggered only once. Defaults to false.
  /// 選填。若為 true，對話將只會觸發一次。預設為 false。
  Once?: boolean,
  /// Optional. If present, a list of options will be displayed when the dialogue ends.
  /// 選填。若存在，對話結束時將會顯示選項列表。
  Options?: Options,
  /// Optional. Common extra settings for dialogues.
  /// 選填。對話的通用額外設定。
  Extra?: Extra,
}

struct Options {
  /// The options to choose from. The maximum number of options is 4.
  /// 可選擇的選項。最多 4 個選項。
  List: [Option] @ 1..4,
  /// Optional. If true, after the chosen dialogue ends, the options will be displayed again. Defaults to false.
  /// 選填。若為 true，在選擇的對話結束後，選項將會再次顯示。預設為 false。
  LoopBack?: boolean,
  /// Optional. If true, the "Exit" option will not show. Defaults to false.
  /// 選填。若為 true，將不會顯示「離開」選項。預設為 false。
  NoExit?: boolean,
}

struct Option {
  /// The text that will be displayed as the option name.
  /// 將會顯示為選項名稱的文字。
  Option: (
    #[since="1.21.5"] Text |
    #[until="1.21.5"] #[text_component] string
    ),
  /// The multiple dialogue texts that will be orederly displayed when the option is selected.
  /// 選擇該選項時將會按順序顯示的多段對話文字。
  React: (
    #[since="1.21.5"] [Text] |
    #[until="1.21.5"] [#[text_component] string]
    ),
  /// Optional. If present, the option won't be selectable if the condition do not match.
  /// 選填。若此項存在，當條件不符合時該選項將無法選擇。
  Condition?: Condition,
  /// Optional. Independent setting for whether the same options to be displayed again when the dialogue ends.
  /// 選填。獨立設定對話結束後是否再次顯示相同選項。
  LoopBack?: boolean,
  /// Optional. Common extra settings for dialogues.
  /// 選填。對話的通用額外設定。
  Extra?: Extra,
}

type Condition = (
  struct {
    /// Type of the condition, can be "item", "score", or "command".
    /// 條件的類型，可以是 "item"、"score" 或 "command"。
    Type: "item",
    /// The item stack that the player must have.
    /// 玩家必須擁有的物品堆疊。
    Value: (
      #[since="1.20.5"] struct {
        item_predicate: #[item_predicate] string,
        count?: int @ 1..99,
      } |
      #[until="1.20.5"] ItemStack |
      ),
  } |
  struct {
    /// Type of the condition, can be "item", "score", or "command".
    /// 條件的類型，可以是 "item"、"score" 或 "command"。
    Type: "score",
    /// The scoreboard condition that the player must satisfy.
    /// 玩家必須滿足的計分板條件。
    Value: ScoreTest
  } |
  struct {
    /// Type of the condition, can be "item", "score", or "command".
    /// 條件的類型，可以是 "item"、"score" 或 "command"。
    Type: "command",
    /// The command that the player must successfully execute.
    /// 玩家必須成功執行的指令。
    Value: #[command] string,
  } |
)

struct ScoreTest {
  /// The objective of the scoreboard.
  /// 計分板的項目。
  score: #[objective] string,
  /// The holder of the scoreboard.
  /// 計分板的持有者。
  target: #[score_holder] string,
  /// The range of the score. Formatted as "int" or "min..max".
  /// 計分板的範圍。格式為 "int" 或 "min..max"。
  range: string,
}

struct Extra {
  /// Optional. The command that will be executed when the dialogue starts.
  /// 可選。對話開始時將會執行的指令。
  StartCommand?: #[command] string,
  /// Optional. The command that will be executed when the dialogue ends normally.
  /// 可選。對話正常結束時將會執行的指令。
  EndCommand?: #[command] string,
  /// Optional. The command that will be executed when the dialogue ends due to the player leaving.
  /// 可選。因玩家離開導致對話結束時將會執行的指令。
  LeaveCommand?: #[command] string,
  /// Optional. Overrides sound pool for the indicated section of dialogue.
  /// 可選。覆蓋指定對話部分的音效池。
  SoundOverrides?: [SoundOverride],
}

struct Exit {
  /// The multiple dialogue texts that will be orederly displayed.
  /// 將會按順序顯示的多段對話文字。
  Texts: (
    #[since="1.21.5"] [Text] |
    #[until="1.21.5"] [#[text_component] string]
    ),
  /// Optional. Common extra settings for dialogues.
  /// 可選。對話的通用額外設定。
  Extra?: Extra,
}

struct Idle {
  /// The single dialogue text that will be displayed.
  /// 將會顯示的單段對話文字。
  Text: (
    #[since="1.21.5"] Text |
    #[until="1.21.5"] #[text_component] string
    ),
  /// The display duration in seconds. Fixed value and range representation are both supported.
  /// 顯示時間（秒）。支援固定值和範圍表示。
  Duration: TimeRange,
  /// The rest time in seconds. Fixed value and range representation are both supported.
  /// 休息時間（秒）。支援固定值和範圍表示。
  Rest: TimeRange,
  /// Optional. Sounds that will be played when the idle text is displayed. If omitted, the sound pool in the root is used.
  /// 可選。當顯示閒置文字時將會播放的音效。若省略，將使用根目錄中的音效池。
  SoundPool?: [Sound],
}

type TimeRange = (
  int |
  struct {
    /// The minimum value of the range. Must be greater than or equal to 0.
    /// 範圍的最小值。必須大於或等於 0。
    min: int @ 0..,
    /// The maximum value of the range. Must be greater than the minimum value.
    /// 範圍的最大值。必須大於最小值。
    max: int @ 0..,
  }
)

struct SoundOverride {
  /// The index of the dialogue section that the sound pool will be overridden.
  /// 要覆蓋音效池的目標對話段落的索引。
  index: int @ 0..,
  /// The sound pool to use instead.
  /// 要使用的音效池。
  pool: [Sound],
}

struct Sound {
  /// The sound event ID.
  /// 音效事件 ID。
  id: #[id="sound_event"] string,
  /// Optional. The detailed sound setting.
  /// 可選。音效的詳細設定。
  setting?: struct SoundSetting {
    /// Optional. The volume of the sound. Must be greater than or equal to 0. Defaults to 1.
    /// 可選。音效的音量。必須大於或等於 0。預設為 1。
    volume?: float @ 0..,
    /// Optional. The pitch of the sound. Must be inclusivly between 0 and 2. Values less than 0.5 are equavalent to 0.5. Defaults to 1.
    /// 可選。音效的音調。必須在 0 到 2 之間。小於 0.5 的值等效於 0.5。預設為 1。
    pitch?: float @ 0..2,
    /// Optional. The minimum volume of the sound. Must be inclusivly between 0 and 1. Valus greater than 0 will make all players hear the sound regardless of distance. Defaults to 0.
    /// 可選。音效的最小音量。必須在 0 到 1 之間。大於 0 的值將使所有玩家無論距離如何都能聽到音效。預設為 0。
    minVolume?: float @ 0..1,
  },
}


struct Recipe {
  /// The item stack needed for the offer.
  /// 交易所需的物品堆疊。
  buy: TraderItemStack,
  /// Optional. The extra item stack needed for the offer.
  /// 可選。交易所需的額外物品堆疊。
  bugB?: TraderItemStack,
  /// The item stack that the player will get from the offer.
  /// 玩家將從交易中獲得的物品堆疊。
  sell: TraderItemStack,
  /// The maximum number of times the offer can be used. 2147483647 for infinite.
  /// 交易可使用的最大次數。2147483647 表示無限次數。
  maxUses: int @ 0..,
}

type TraderItemStack = (
  struct {
    ...SingleItem,
    /// Number of items in the stack
    #[since="1.20.5"]
    count: int @ 1..99,
    /// Number of items in the stack
    #[until="1.20.5"]
    Count: byte,
  } |
  struct {
    /// ID of the loot table.
    /// 戰利品表的 ID。
    Name: #[id="loot_table"] string,
    /// Number of items in the stack
    #[since="1.20.5"]
    count: int @ 1..99,
    /// Number of items in the stack
    #[until="1.20.5"]
    Count: byte,
  }
)